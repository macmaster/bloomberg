# hadoop-metrics2.properties
# default configurations for jmx metrics reporting.
# contains some starter configuration sets for various metrics2 sinks.
# 
# syntax: [prefix].[source|sink].[instance].[options]
# See javadoc of package-info.java for org.apache.hadoop.metrics2 for details
# 
# author: Ronald Macmaster (Ronnymacmaster@gmail.com)
# date: 08/02/17

# # file sink
# # log to a local system file.
# *.sink.file.period=5
# *.sink.file.class=org.apache.hadoop.metrics2.sink.FileSink
# sink.file.loghome=/var/log/hadoop-metrics2
# client.sink.file.filename=${sink.file.loghome}/client.log

# # multiple context example
# # redirect metrics of different contexts to different sinks (in this case files)
# client.sink.file_jvm.class=org.apache.hadoop.metrics2.sink.FileSink
# client.sink.file_jvm.context=jvm
# client.sink.file_jvm.filename=nodemanager-jvm-metrics.out
# client.sink.file_mapred.class=org.apache.hadoop.metrics2.sink.FileSink
# client.sink.file_mapred.context=mapred
# client.sink.file_mapred.filename=nodemanager-mapred-metrics.out

# # graphite sink
# # upload to a graphite server.
# *.sink.graphite.period=5
# *.sink.graphite.class=org.apache.hadoop.metrics2.sink.GraphiteSink
# client.sink.graphite.server_host=localhost
# client.sink.graphite.server_port=7877
# client.sink.graphite.metrics_prefix=client

# # custom sink
# # override the void putMetrics(Metric Record record) method.
# # handle metrics reporting on their own.
# # must override com.bloomberg.bach.metrics.RecordHandler
# *.sink.custom.period=5
# *.sink.custom.class=[path.to.custom.sink] 
# # must add another key here of form [prefix].sink.[instance].[option]

# # console sink
# *.sink.log.period=2
# *.sink.log.class=com.bloomberg.bach.metrics.sink.LogSink
# client.sink.log.level=INFO
# client.sink.log.format="%n (%d): %v"
# client.sink.log.prefix="\t- "

# # # filter example for HBase client metrics.
# # client.sink.log.record.filter.class=org.apache.hadoop.metrics2.filter.RegexFilter
# # client.sink.log.metric.filter.class=org.apache.hadoop.metrics2.filter.RegexFilter
# # client.sink.log.record.filter.include=CLIENT|ZOOKEEPER
# # client.sink.log.metric.filter.include=Rpc.*\(Multi\).*

# # kafka sink (Apache)
# # publish metrics to a kafka topic
# # the sink from Apache Hadoop 3.0.0-beta1-SNAPSHOT has less config flexibility
# *.sink.kafka.period=5
# client.sink.kafka.broker_list=localhost:9092,127.0.0.1:9092
# client.sink.kafka.topic=ronny

# # kafka sink
# # publish metrics to a kafka topic
# # configuration parameters can be found here: 
# # http://kafka.apache.org/documentation/#producerconfigs
# 
# # if file property is defined, kafka configuration parameters are red from the file.
# # otherwise, they are sourced from their manual definition here.
#
# *.sink.kafka.period=5
# *.sink.kafka.class=com.bloomberg.bach.metrics.sink.KafkaSink
# *.sink.kafka.topic=ronny
# *.sink.kafka.file=producer.properties

# sample kafka configuration
# client.sink.kafka.bootstrap.servers=localhost:9092
# client.sink.kafka.compression.type=none
# client.sink.kafka.key.serializer=org.apache.kafka.common.serialization.StringSerializer
# client.sink.kafka.value.serializer=org.apache.kafka.common.serialization.StringSerializer
# client.sink.kafka.request.timeout.ms=500

